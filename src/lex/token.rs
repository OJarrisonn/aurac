use logos::Logos;

#[derive(Debug, PartialEq, Logos)]
#[logos(skip r"[ \t\n\f]+")]
pub enum Token {
    #[token("val")]
    Val,
    #[token("fn")]
    Fn,
    #[token("main")]
    Main,
    #[token("type")]
    Type,
    #[token("tag")]
    Tag,
    #[token("import")]
    Import,
    #[token("external")]
    External,
    #[token("final")]
    Final,
    #[token("lib")]
    Lib,
    #[token("mod")]
    Mod,
    #[token("matchfn")]
    MatchFn,
    #[token("struct")]
    Struct,
    #[token("enum")]
    Enum,
    #[token("union")]
    Union,
    #[regex("[a-z][a-z0-9_]*", |lex| lex.slice().to_string())]
    ValueIdentifier(String),
    #[regex("[A-Z][a-zA-Z0-9]*", |lex| lex.slice().to_string())]
    TypeIdentifier(String),
    #[regex("#[a-z][a-z0-9-]*", |lex| lex.slice().to_string())]
    TagIdentifier(String),
    #[regex("[0-9]+", |lex| lex.slice().parse::<i64>().unwrap())]
    IntegerLiteral(i64),
    #[regex(r#""[^"]*""#, |lex| lex.slice()[1..lex.span().len() - 1].to_string())]
    StringLiteral(String),
    #[token("#(")]
    HashLParen,
    #[token("(")]
    LParen,
    #[token(")")]
    RParen,
    #[token("{")]
    LBrace,
    #[token("}")]
    RBrace,
    #[token("[")]
    LBracket,
    #[token("]")]
    RBracket,
    #[token(";")]
    Semicolon,
    #[token(",")]
    Comma,
    #[token("...")]
    Spread,
    #[token(".")]
    Dot,
    #[token(":")]
    Colon,
    #[token("->")]
    Arrow,
    #[token("=>")]
    FatArrow,
    #[token("|>")]
    Pipe,
    #[token("$>")]
    Cast,
    #[token("$$")]
    OfType,
    #[token("??")]
    Unwrap,
    #[token("?=")]
    Default,
    #[token("?.")]
    SafeAccess,
    #[token("?>")]
    SafePipe,
    #[token("=")]
    Assign,
    #[token("==")]
    Equals,
    #[token("!=")]
    NotEquals,
    #[token(">")]
    GreaterThan,
    #[token("<")]
    LessThan,
    #[token(">=")]
    GreaterThanEquals,
    #[token("<=")]
    LessThanEquals,
    #[token("+")]
    Plus,
    #[token("-")]
    Minus,
    #[token("*")]
    Multiply,
    #[token("/")]
    Divide,
    #[token("%")]
    Modulo,
    #[token("**")]
    Power,
    #[token("&&")]
    And,
    #[token("||")]
    Or,
    #[token("!")]
    Not,
    #[token("::")]
    Join,
    #[token("\\\\")]
    Split,
    #[token("++")]
    Concat,
    #[token("<<")]
    LeftShift,
    #[token(">>")]
    RightShift,
    #[token("~")]
    Tilde,
    #[token("_")]
    DontCare,
}